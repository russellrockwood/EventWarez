#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleUI
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="EventWarez")]
	public partial class OperationDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAttendee(Attendee instance);
    partial void UpdateAttendee(Attendee instance);
    partial void DeleteAttendee(Attendee instance);
    partial void InsertShow(Show instance);
    partial void UpdateShow(Show instance);
    partial void DeleteShow(Show instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertTicket(Ticket instance);
    partial void UpdateTicket(Ticket instance);
    partial void DeleteTicket(Ticket instance);
    partial void InsertWorkOrder(WorkOrder instance);
    partial void UpdateWorkOrder(WorkOrder instance);
    partial void DeleteWorkOrder(WorkOrder instance);
    #endregion
		
		public OperationDataContext() : 
				base(global::ConsoleUI.Properties.Settings.Default.EventWarezConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public OperationDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OperationDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OperationDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public OperationDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Attendee> Attendees
		{
			get
			{
				return this.GetTable<Attendee>();
			}
		}
		
		public System.Data.Linq.Table<Show> Shows
		{
			get
			{
				return this.GetTable<Show>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<Ticket> Tickets
		{
			get
			{
				return this.GetTable<Ticket>();
			}
		}
		
		public System.Data.Linq.Table<WorkOrder> WorkOrders
		{
			get
			{
				return this.GetTable<WorkOrder>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Attendee")]
	public partial class Attendee : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<Ticket> _Tickets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttIdChanging(int value);
    partial void OnAttIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Attendee()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int AttId
		{
			get
			{
				return this._AttId;
			}
			set
			{
				if ((this._AttId != value))
				{
					this.OnAttIdChanging(value);
					this.SendPropertyChanging();
					this._AttId = value;
					this.SendPropertyChanged("AttId");
					this.OnAttIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attendee_Ticket", Storage="_Tickets", ThisKey="AttId", OtherKey="AttId")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Attendee = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Attendee = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Show")]
	public partial class Show : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ShowId;
		
		private string _Feature;
		
		private System.DateTime _ShowTime;
		
		private bool _IsSoldOut;
		
		private EntitySet<Ticket> _Tickets;
		
		private EntitySet<WorkOrder> _WorkOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnShowIdChanging(int value);
    partial void OnShowIdChanged();
    partial void OnFeatureChanging(string value);
    partial void OnFeatureChanged();
    partial void OnShowTimeChanging(System.DateTime value);
    partial void OnShowTimeChanged();
    partial void OnIsSoldOutChanging(bool value);
    partial void OnIsSoldOutChanged();
    #endregion
		
		public Show()
		{
			this._Tickets = new EntitySet<Ticket>(new Action<Ticket>(this.attach_Tickets), new Action<Ticket>(this.detach_Tickets));
			this._WorkOrders = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrders), new Action<WorkOrder>(this.detach_WorkOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					this.OnShowIdChanging(value);
					this.SendPropertyChanging();
					this._ShowId = value;
					this.SendPropertyChanged("ShowId");
					this.OnShowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Feature", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Feature
		{
			get
			{
				return this._Feature;
			}
			set
			{
				if ((this._Feature != value))
				{
					this.OnFeatureChanging(value);
					this.SendPropertyChanging();
					this._Feature = value;
					this.SendPropertyChanged("Feature");
					this.OnFeatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowTime", DbType="DateTime NOT NULL")]
		public System.DateTime ShowTime
		{
			get
			{
				return this._ShowTime;
			}
			set
			{
				if ((this._ShowTime != value))
				{
					this.OnShowTimeChanging(value);
					this.SendPropertyChanging();
					this._ShowTime = value;
					this.SendPropertyChanged("ShowTime");
					this.OnShowTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSoldOut", DbType="Bit NOT NULL")]
		public bool IsSoldOut
		{
			get
			{
				return this._IsSoldOut;
			}
			set
			{
				if ((this._IsSoldOut != value))
				{
					this.OnIsSoldOutChanging(value);
					this.SendPropertyChanging();
					this._IsSoldOut = value;
					this.SendPropertyChanged("IsSoldOut");
					this.OnIsSoldOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Show_Ticket", Storage="_Tickets", ThisKey="ShowId", OtherKey="ShowId")]
		public EntitySet<Ticket> Tickets
		{
			get
			{
				return this._Tickets;
			}
			set
			{
				this._Tickets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Show_WorkOrder", Storage="_WorkOrders", ThisKey="ShowId", OtherKey="ShowId")]
		public EntitySet<WorkOrder> WorkOrders
		{
			get
			{
				return this._WorkOrders;
			}
			set
			{
				this._WorkOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Show = this;
		}
		
		private void detach_Tickets(Ticket entity)
		{
			this.SendPropertyChanging();
			entity.Show = null;
		}
		
		private void attach_WorkOrders(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.Show = this;
		}
		
		private void detach_WorkOrders(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.Show = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StaffId;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _AccessLevel;
		
		private EntitySet<WorkOrder> _WorkOrders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffIdChanging(int value);
    partial void OnStaffIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnAccessLevelChanging(int value);
    partial void OnAccessLevelChanged();
    #endregion
		
		public Staff()
		{
			this._WorkOrders = new EntitySet<WorkOrder>(new Action<WorkOrder>(this.attach_WorkOrders), new Action<WorkOrder>(this.detach_WorkOrders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessLevel", DbType="Int NOT NULL")]
		public int AccessLevel
		{
			get
			{
				return this._AccessLevel;
			}
			set
			{
				if ((this._AccessLevel != value))
				{
					this.OnAccessLevelChanging(value);
					this.SendPropertyChanging();
					this._AccessLevel = value;
					this.SendPropertyChanged("AccessLevel");
					this.OnAccessLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_WorkOrder", Storage="_WorkOrders", ThisKey="StaffId", OtherKey="StaffId")]
		public EntitySet<WorkOrder> WorkOrders
		{
			get
			{
				return this._WorkOrders;
			}
			set
			{
				this._WorkOrders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkOrders(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_WorkOrders(WorkOrder entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ticket")]
	public partial class Ticket : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _TicketId;
		
		private System.Nullable<int> _ShowId;
		
		private System.Nullable<int> _AttId;
		
		private int _Price;
		
		private int _TypeOfTicket;
		
		private EntityRef<Attendee> _Attendee;
		
		private EntityRef<Show> _Show;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTicketIdChanging(int value);
    partial void OnTicketIdChanged();
    partial void OnShowIdChanging(System.Nullable<int> value);
    partial void OnShowIdChanged();
    partial void OnAttIdChanging(System.Nullable<int> value);
    partial void OnAttIdChanged();
    partial void OnPriceChanging(int value);
    partial void OnPriceChanged();
    partial void OnTypeOfTicketChanging(int value);
    partial void OnTypeOfTicketChanged();
    #endregion
		
		public Ticket()
		{
			this._Attendee = default(EntityRef<Attendee>);
			this._Show = default(EntityRef<Show>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TicketId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int TicketId
		{
			get
			{
				return this._TicketId;
			}
			set
			{
				if ((this._TicketId != value))
				{
					this.OnTicketIdChanging(value);
					this.SendPropertyChanging();
					this._TicketId = value;
					this.SendPropertyChanged("TicketId");
					this.OnTicketIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowId", DbType="Int")]
		public System.Nullable<int> ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					if (this._Show.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShowIdChanging(value);
					this.SendPropertyChanging();
					this._ShowId = value;
					this.SendPropertyChanged("ShowId");
					this.OnShowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttId", DbType="Int")]
		public System.Nullable<int> AttId
		{
			get
			{
				return this._AttId;
			}
			set
			{
				if ((this._AttId != value))
				{
					if (this._Attendee.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttIdChanging(value);
					this.SendPropertyChanging();
					this._AttId = value;
					this.SendPropertyChanged("AttId");
					this.OnAttIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Int NOT NULL")]
		public int Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfTicket", DbType="Int NOT NULL")]
		public int TypeOfTicket
		{
			get
			{
				return this._TypeOfTicket;
			}
			set
			{
				if ((this._TypeOfTicket != value))
				{
					this.OnTypeOfTicketChanging(value);
					this.SendPropertyChanging();
					this._TypeOfTicket = value;
					this.SendPropertyChanged("TypeOfTicket");
					this.OnTypeOfTicketChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Attendee_Ticket", Storage="_Attendee", ThisKey="AttId", OtherKey="AttId", IsForeignKey=true)]
		public Attendee Attendee
		{
			get
			{
				return this._Attendee.Entity;
			}
			set
			{
				Attendee previousValue = this._Attendee.Entity;
				if (((previousValue != value) 
							|| (this._Attendee.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Attendee.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Attendee.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._AttId = value.AttId;
					}
					else
					{
						this._AttId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Attendee");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Show_Ticket", Storage="_Show", ThisKey="ShowId", OtherKey="ShowId", IsForeignKey=true)]
		public Show Show
		{
			get
			{
				return this._Show.Entity;
			}
			set
			{
				Show previousValue = this._Show.Entity;
				if (((previousValue != value) 
							|| (this._Show.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Show.Entity = null;
						previousValue.Tickets.Remove(this);
					}
					this._Show.Entity = value;
					if ((value != null))
					{
						value.Tickets.Add(this);
						this._ShowId = value.ShowId;
					}
					else
					{
						this._ShowId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Show");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkOrder")]
	public partial class WorkOrder : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _WorkOrderId;
		
		private int _StaffId;
		
		private int _ShowId;
		
		private System.DateTimeOffset _CreatedUtc;
		
		private System.Nullable<System.DateTimeOffset> _ModifiedUtc;
		
		private int _Department;
		
		private EntityRef<Show> _Show;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWorkOrderIdChanging(int value);
    partial void OnWorkOrderIdChanged();
    partial void OnStaffIdChanging(int value);
    partial void OnStaffIdChanged();
    partial void OnShowIdChanging(int value);
    partial void OnShowIdChanged();
    partial void OnCreatedUtcChanging(System.DateTimeOffset value);
    partial void OnCreatedUtcChanged();
    partial void OnModifiedUtcChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnModifiedUtcChanged();
    partial void OnDepartmentChanging(int value);
    partial void OnDepartmentChanged();
    #endregion
		
		public WorkOrder()
		{
			this._Show = default(EntityRef<Show>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkOrderId", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int WorkOrderId
		{
			get
			{
				return this._WorkOrderId;
			}
			set
			{
				if ((this._WorkOrderId != value))
				{
					this.OnWorkOrderIdChanging(value);
					this.SendPropertyChanging();
					this._WorkOrderId = value;
					this.SendPropertyChanged("WorkOrderId");
					this.OnWorkOrderIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffId", DbType="Int NOT NULL")]
		public int StaffId
		{
			get
			{
				return this._StaffId;
			}
			set
			{
				if ((this._StaffId != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffIdChanging(value);
					this.SendPropertyChanging();
					this._StaffId = value;
					this.SendPropertyChanged("StaffId");
					this.OnStaffIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShowId", DbType="Int NOT NULL")]
		public int ShowId
		{
			get
			{
				return this._ShowId;
			}
			set
			{
				if ((this._ShowId != value))
				{
					if (this._Show.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnShowIdChanging(value);
					this.SendPropertyChanging();
					this._ShowId = value;
					this.SendPropertyChanged("ShowId");
					this.OnShowIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedUtc", DbType="DateTimeOffset NOT NULL")]
		public System.DateTimeOffset CreatedUtc
		{
			get
			{
				return this._CreatedUtc;
			}
			set
			{
				if ((this._CreatedUtc != value))
				{
					this.OnCreatedUtcChanging(value);
					this.SendPropertyChanging();
					this._CreatedUtc = value;
					this.SendPropertyChanged("CreatedUtc");
					this.OnCreatedUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedUtc", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ModifiedUtc
		{
			get
			{
				return this._ModifiedUtc;
			}
			set
			{
				if ((this._ModifiedUtc != value))
				{
					this.OnModifiedUtcChanging(value);
					this.SendPropertyChanging();
					this._ModifiedUtc = value;
					this.SendPropertyChanged("ModifiedUtc");
					this.OnModifiedUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Department", DbType="Int NOT NULL")]
		public int Department
		{
			get
			{
				return this._Department;
			}
			set
			{
				if ((this._Department != value))
				{
					this.OnDepartmentChanging(value);
					this.SendPropertyChanging();
					this._Department = value;
					this.SendPropertyChanged("Department");
					this.OnDepartmentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Show_WorkOrder", Storage="_Show", ThisKey="ShowId", OtherKey="ShowId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Show Show
		{
			get
			{
				return this._Show.Entity;
			}
			set
			{
				Show previousValue = this._Show.Entity;
				if (((previousValue != value) 
							|| (this._Show.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Show.Entity = null;
						previousValue.WorkOrders.Remove(this);
					}
					this._Show.Entity = value;
					if ((value != null))
					{
						value.WorkOrders.Add(this);
						this._ShowId = value.ShowId;
					}
					else
					{
						this._ShowId = default(int);
					}
					this.SendPropertyChanged("Show");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_WorkOrder", Storage="_Staff", ThisKey="StaffId", OtherKey="StaffId", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.WorkOrders.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.WorkOrders.Add(this);
						this._StaffId = value.StaffId;
					}
					else
					{
						this._StaffId = default(int);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
